#include<iostream>
#include<cstring>
#include<algorithm>
#define mem(a,b) memset(a,b,sizeof(a))
using namespace std;

const int INF=0x3f3f3f3f;
const int MAX_N=500007;
struct node{
	int n,pos,rank;
}num[MAX_N];

int c[MAX_N];
int n;
long long ans;
 
void init()
{
	mem(c,0);
	ans=0;
}

int cmp_n(node x,node y)
{
	return x.n<y.n;
}

int cmp_pos(node x,node y)
{
	return x.pos<y.pos;
}

int lowbit(int x)
{
	return x&(-x);
}

void modify(int x,int t)
{
	for(;x<=n;x+=lowbit(x))
	{
		c[x]+=t;
	}
}

int getsum(int x)
{
	int s=0;
	for(;x;x-=lowbit(x))
	{
		s+=c[x];
	}
	return s;
}

int main()
{
	cin>>n;
	init();
	for(int i=1;i<=n;i++)
	{
		cin>>num[i].n;
		num[i].pos=i;
	}
	sort(num+1,num+n+1,cmp_n);
	num[0].n=INF;
	for(int i=1;i<=n;i++) 
	{
		if(num[i].n!=num[i-1].n)
		{
			num[i].rank=i;
		}
		else
		{
			num[i].rank=num[i-1].rank;
		}
	}
	sort(num+1,num+n+1,cmp_pos);
	for(int i=1;i<=n;i++)
	{
		modify(num[i].rank,1);
		ans+=i-getsum(num[i].rank);
	}
	cout<<ans<<endl;
}
