var
a,num,c:array [0..500001] of int64;
//成功优化空间
ans,n:int64;
i:longint;

procedure qsort(low,high:longint);
var i,j,mid,temp:longint;
begin
  i:=low;j:=high;mid:=a[(i+j) div 2];
  repeat
    while a[i]<mid do i:=i+1;
    while a[j]>mid do j:=j-1;
    if i<=j then
      begin
        temp:=a[i];a[i]:=a[j];a[j]:=temp;
        temp:=num[i];num[i]:=num[j];num[j]:=temp;
        i:=i+1;j:=j-1;
      end;
  until i>j;
  if i<high then qsort(i,high);
  if j>low then qsort(low,j);
end;

function lowbit(x:int64):int64;
begin
  lowbit:=(-x) and x;
end;

procedure change(x:int64);
begin
  while (x<=n) do
    begin
      c[x]:=c[x]+1;
      x:=x+lowbit(x);
    end;
end;

function sum(x:int64):int64;
var s:longint;
begin
  s:=0;
  while x>0 do
    begin
      s:=s+c[x];
      x:=x-lowbit(x);
    end;
  sum:=s;
end;

begin
  readln(n);
  ans:=0;
  for i:=1 to n do
    begin
      read(a[i]);
      num[i]:=i;//num记a[i]原来的标号
    end;
  qsort(1,n);//在排序过程中整体交换（包括num）
  for i:=1 to n do a[num[i]]:=i;
  //也就是编号为num[i]的数字记排名为i,成功做到了只改变数字的值，而不改变数字的大小
  //经典离散思想的应用
  for i:=1 to n do
    begin
      change(a[i]);
      ans:=ans+(i-sum(a[i]));//其余同前一题
    end;
  writeln(ans);
end.
